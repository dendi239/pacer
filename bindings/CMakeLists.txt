include(litgen.cmake)

litgen_find_nanobind()

add_custom_target(
    _generate_pacer_bindings
    COMMAND "${Python_EXECUTABLE}" "${CMAKE_CURRENT_SOURCE_DIR}/generate-bindings.py"
    COMMENT "Building pacer python bindings"
)

# The python module sources
set(python_module_sources
    module.cpp                  # The python module entry point
    nanobind_pacer.cpp        # The pybind11 bindings to the library, which are mainly auto-generated by litgen
)

nanobind_add_module(_pacer ${python_module_sources})

add_library(pacer INTERFACE)
target_link_libraries(pacer INTERFACE
  pacer::datatypes
  pacer::geometry
  pacer::laps
  pacer::gps-source
  pacer::laps-display
)

if (SKBUILD)
  set(LITGEN_PATH "${CMAKE_INSTALL_PREFIX}")
else()
  set(LITGEN_PATH  "${CMAKE_SOURCE_DIR}/bindings")
endif()

# Call litgen_setup_module to generate the python wrapper around the native module
litgen_setup_module(
    # The C++ library for which we are building bindings
    pacer
    # The native python module name
    _pacer
    # This is the python wrapper around the native module
    pacer
    # The path where the python module will be copied after build (for editable mode)
    "${LITGEN_PATH}"
)

add_dependencies(
    _pacer
    _generate_pacer_bindings
)
